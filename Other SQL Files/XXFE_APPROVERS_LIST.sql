create or replace PACKAGE XXFE_APPROVERS_LIST AS
	FUNCTION XXFE_GET_APPROVER_NAME (P_RESPID IN NUMBER) RETURN VARCHAR2;
	PROCEDURE XX_REQUEST (L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER,L_START_DATE IN DATE,L_END_DATE IN DATE);
	PROCEDURE XX_REVOKE (L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER );
	PROCEDURE XX_APPROVER_SUBMIT(L_APPLNAME VARCHAR2,L_RESPNAME VARCHAR2,L_APPNAME_1 IN VARCHAR2,L_APPNAME_2 IN VARCHAR2,L_APPNAME_3 IN VARCHAR2);
	PROCEDURE XX_CANCEL (L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER );
	PROCEDURE XX_TEST_START_WF_WORK;
 	PROCEDURE XX_TEST;
	PROCEDURE XX_TEST_ASSIGN(itemtype IN VARCHAR2,itemkey  IN VARCHAR2,actid    IN NUMBER,funcmode IN VARCHAR2,RESULT   IN OUT VARCHAR2);
END XXFE_APPROVERS_LIST;
/
create or replace PACKAGE BODY XXFE_APPROVERS_LIST AS
	FUNCTION XXFE_GET_APPROVER_NAME (P_RESPID IN NUMBER) RETURN VARCHAR2 AS
   CURSOR APPROVERS_ID IS (SELECT APPROVER1,APPROVER2,APPROVER3 FROM xxfe.XXFE_RESP_APPROVER_LIST AL WHERE AL.RESPONSIBILITY_ID = P_RESPID);    
		I number;
		L_USER_L_ID1 INTEGER;
		L_USER_L_ID2 INTEGER;
		L_USER_L_ID3 INTEGER;
		L_U_NAME1 VARCHAR2(100);
		L_U_NAME2 VARCHAR2(100);
		L_U_NAME3 VARCHAR2(100);
		L_FINAL_STRING VARCHAR2(250);
		NO_USER NUMBER;
		--EXCEPTIONS
		NO_APPROVERS_EXCEPTION EXCEPTION;
		NO_USER_EXCEPTION EXCEPTION;
	BEGIN
		L_FINAL_STRING := null;
		OPEN APPROVERS_ID;	
		FETCH APPROVERS_ID INTO L_USER_L_ID1,L_USER_L_ID2,L_USER_L_ID3;
		IF (L_USER_L_ID1 IS NOT NULL) THEN
			SELECT USER_NAME INTO L_U_NAME1 FROM FND_USER WHERE USER_ID=L_USER_L_ID1;
			IF (L_U_NAME1 IS NULL) THEN	
				NO_USER := L_USER_L_ID1;
				RAISE NO_USER_EXCEPTION;
			ELSE
				L_FINAL_STRING := L_U_NAME1;
      END IF;
    END IF;
		IF(L_USER_L_ID2 IS NOT NULL) THEN
			SELECT USER_NAME INTO L_U_NAME2 FROM FND_USER WHERE USER_ID=L_USER_L_ID2;
			IF (L_U_NAME2 IS NULL) THEN	
				NO_USER := L_USER_L_ID2;
				RAISE NO_USER_EXCEPTION;
			ELSE
				L_FINAL_STRING := L_FINAL_STRING || ' -> ' || L_U_NAME2 ;
			END IF;
		END IF;
		IF(L_USER_L_ID3 IS NOT NULL) THEN
			SELECT USER_NAME INTO L_U_NAME3 FROM FND_USER WHERE USER_ID=L_USER_L_ID3;
			IF (L_U_NAME3 IS NULL) THEN	
				NO_USER := L_USER_L_ID3;
				RAISE NO_USER_EXCEPTION;
			ELSE
				L_FINAL_STRING := L_FINAL_STRING || ' -> ' || L_U_NAME3 ;
      END IF;
    END IF;
		CLOSE APPROVERS_ID;
		IF (L_FINAL_STRING IS NULL) THEN
			RAISE NO_APPROVERS_EXCEPTION;
		END IF;
		
		RETURN L_FINAL_STRING;
		
		EXCEPTION
			WHEN NO_APPROVERS_EXCEPTION THEN
				--DBMS_OUTPUT.PUT_LINE('NO APPROVERS PRESENT IN THE TABLE;');
				RETURN L_FINAL_STRING;
				
			WHEN NO_USER_EXCEPTION THEN	
				--DBMS_OUTPUT.PUT_LINE('NO USER FOUND FOR THE ID :' || NO_USER);
				RETURN L_FINAL_STRING;
			WHEN OTHERS THEN
				--DBMS_OUTPUT.PUT_LINE('ERROR DETECTED!');
				RETURN L_FINAL_STRING;
        
	END;
	
	--SEQUENCE NUMBER INCLUDED FOR INSERTION
	PROCEDURE XX_REQUEST(L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER,L_START_DATE IN DATE,L_END_DATE IN DATE) AS
	BEGIN
	INSERT INTO XXFE_USER_RESP_PROVISION(USER_ID,RESPONSIBILITY_ID,NOTIFICATION_ID,START_DATE,END_DATE,SEQ_NO) VALUES (L_USER_ID,L_RESPONSIBILITY_ID,L_NOTIFICATION_ID,L_START_DATE,L_END_DATE,XXFE.XX_APPROVERS_LIST_SEQ.NEXTVAL);
	COMMIT;
	EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
	END;
	
	PROCEDURE XX_REVOKE(L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER ) AS
	BEGIN
		UPDATE XXFE_USER_RESP_PROVISION SET STATUS='REVOKED' WHERE USER_ID = L_USER_ID AND RESPONSIBILITY_ID=L_RESPONSIBILITY_ID AND NOTIFICATION_ID=L_NOTIFICATION_ID;
		COMMIT;
	EXCEPTION
	WHEN OTHERS THEN	
		ROLLBACK;
	END;

	PROCEDURE XX_APPROVER_SUBMIT(L_APPLNAME VARCHAR2,L_RESPNAME VARCHAR2,L_APPNAME_1 IN VARCHAR2,L_APPNAME_2 IN VARCHAR2,L_APPNAME_3 IN VARCHAR2) AS
	L_APPLID INTEGER;
	L_RESPID INTEGER;
    L_APP_ID1 INTEGER;
    L_APP_ID2 INTEGER;
    L_APP_ID3 INTEGER;
	BEGIN
		SELECT APPLICATION_ID INTO L_APPLID FROM FND_APPLICATION_TL FAT WHERE FAT.APPLICATION_NAME = L_APPLNAME;
		SELECT RESPONSIBILITY_ID INTO L_RESPID FROM FND_RESPONSIBILITY_TL FRT WHERE FRT.RESPONSIBILITY_NAME = L_RESPNAME;
		SELECT USER_ID INTO L_APP_ID1 FROM FND_USER FU WHERE FU.USER_NAME = L_APPNAME_1;
		SELECT USER_ID INTO L_APP_ID1 FROM FND_USER FU WHERE FU.USER_NAME = L_APPNAME_1;
		SELECT USER_ID INTO L_APP_ID2 FROM FND_USER FU WHERE FU.USER_NAME = L_APPNAME_2;
		SELECT USER_ID INTO L_APP_ID3 FROM FND_USER FU WHERE FU.USER_NAME = L_APPNAME_3;
		UPDATE XXFE_RESP_APPROVER_LIST  SET APPROVER1=L_APP_ID1,APPROVER2=L_APP_ID2,APPROVER3=L_APP_ID3 WHERE APPLICATION_ID=L_APPLID AND RESPONSIBILITY_ID = L_RESPID;
		COMMIT;
		EXCEPTION
		WHEN OTHERS THEN
			ROLLBACK;
	END;
	
	PROCEDURE XX_CANCEL(L_USER_ID IN NUMBER,L_RESPONSIBILITY_ID IN NUMBER ,L_NOTIFICATION_ID IN NUMBER ) AS
	BEGIN
		DELETE FROM XXFE_USER_RESP_PROVISION WHERE USER_ID = L_USER_ID AND RESPONSIBILITY_ID=L_RESPONSIBILITY_ID AND NOTIFICATION_ID=L_NOTIFICATION_ID;
		COMMIT;
	EXCEPTION
	WHEN OTHERS THEN	
		ROLLBACK;
	END;
  
  PROCEDURE XX_TEST
  IS
  BEGIN
  NULL;
  END;
  --INITIATING WORKFLOW
	PROCEDURE XX_TEST_START_WF_WORK
  AS
	BEGIN
		APPS.WF_ENGINE.CREATEPROCESS(itemtype => 'XX_LEAVE',		--Internal name of the workflow
									itemkey => XXFE.XX_TEST_WORKFLOW.NEXTVAL ,	-- Item number. Should be unique
									process => 'XX_LV_MGM_SYS_PROCESS'		-- Internal Name of process.
									);
		APPS.WF_ENGINE.STARTPROCESS(itemtype => 'XX_LEAVE',
									itemkey => XXFE.XX_TEST_WORKFLOW.CURRVAL	-- CURVAL to select the current value from the sequence                      
                                    );
        COMMIT;
	END;
	
	--TEST PROCEDURE FOR ASSIGNING MANAGER ATTRIBUTE
	PROCEDURE XX_TEST_ASSIGN(itemtype IN VARCHAR2,itemkey  IN VARCHAR2,actid    IN NUMBER,funcmode IN VARCHAR2,RESULT   IN OUT VARCHAR2) AS
	v_role_email varchar2(50);
	L_PERSON_ID NUMBER(10);
	L_MANAGER_ID NUMBER(10);
  L_EMAIL VARCHAR(100);
	BEGIN
	--CODE TO START THE WORKFLOW FIRST
	--CODE TO GET THE MANAGER ID
		select person_id INTO L_PERSON_ID from per_all_people_f where first_name LIKE 'SHUBHAM' and trunc(SYSDATE) between effective_start_date and effective_end_date;
		SELECT SUPERVISOR_ID INTO L_MANAGER_ID FROM PER_ALL_ASSIGNMENTS_F where person_id = L_PERSON_ID and trunc(SYSDATE) between effective_start_date and effective_end_date;
		SELECT EMAIL_ADDRESS INTO L_EMAIL FROM PER_ALL_PEOPLE_F WHERE PERSON_ID=L_MANAGER_ID and trunc(SYSDATE) between effective_start_date and effective_end_date;
    select user_name INTO v_role_email FROM FND_USER where email_address = L_EMAIL;
		 wf_engine.setitemattrtext(itemtype => itemtype
                             ,itemkey  => itemkey
                             ,aname    => 'XX_MANAGER_ATTRIBUTE'
                             ,avalue   => v_role_email);
    RESULT := 'COMPLETE:Y';
	END;
END XXFE_APPROVERS_LIST;
/
sho errors;